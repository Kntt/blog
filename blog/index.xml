<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Kntt&#39;s Blog</title>
    <link>http://liuys.me/blog/index.xml</link>
    <description>Recent content in Blogs on Kntt&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 08 Apr 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://liuys.me/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>VUE2学习记录(一)</title>
      <link>http://liuys.me/blog/vue-study-1/</link>
      <pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://liuys.me/blog/vue-study-1/</guid>
      <description>

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;vue2.0来了已经有一段时间了,一直也没好好的看一下2.0的改动, 刚好最近开始使用. 自己也就重新再撸一遍知识点,顺带整&lt;/p&gt;

&lt;p&gt;理一下自己的学习过程,过程中对于 2.0的不同说下自己的理解,若有不对的地方,还望留言指正,共同进步!&lt;/p&gt;

&lt;p&gt;学习过程中的项目,是使用vue-cli 2.2的手脚架项目.&lt;/p&gt;

&lt;p&gt;介绍一下 项目目录结构:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- build		// webpack 配置
|-- config		// 环境参数
|-- src			// 源码
|   |-- assets	
|   |-- components	// 组件目录
|   |-- router		// 路由
|   |-- App.vue		// vue 根模块
|   `-- main.js		// 主入口js文件
|-- static		// 静态资源目录
|-- test		// 单元测试目录
|-- index.html		// 主页
|-- package.json	// 项目依赖
`-- README.md	

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面开始学习过程:&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;模版语法&#34;&gt;模版语法&lt;/h2&gt;

&lt;h3 id=&#34;1-文本&#34;&gt;1.文本&lt;/h3&gt;

&lt;p&gt;数据绑定最常用都语法之一, &amp;ldquo;Mustache&amp;rdquo;语法(双大括号)插值&lt;/p&gt;

&lt;p&gt;对于文本数据的绑定,使用场景太多了,是最基础的用法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;hello {{world}}&amp;lt;/p&amp;gt;
        &amp;lt;p v-text=&amp;quot;&#39;hello &#39; + world&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;{{`hello ${world}`}}&amp;lt;/p&amp;gt;
        &amp;lt;p v-text=&amp;quot;`hello ${world}`&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;button @click=&amp;quot;world=&#39;vue2.0&#39;&amp;quot;&amp;gt;改变wrold值&amp;lt;/button&amp;gt;
     &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;

export default {
     data () {
         return {
              world : &amp;quot;world&amp;quot;
         }
     }
}

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的demo使用了四种绑定文本的语法&lt;/p&gt;

&lt;p&gt;第一:&amp;ldquo;Mustache&amp;rdquo;语法 &lt;code&gt;{{world}}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;第二: &lt;code&gt;v-text&lt;/code&gt;指令&lt;/p&gt;

&lt;p&gt;第三和第四是对第一第二两种写法的 ES6 语法扩展;&lt;/p&gt;

&lt;p&gt;这种语法绑定方式,会一直监听 world 的值, worl的值变化时候,页面也随之刷新;&lt;/p&gt;

&lt;p&gt;还有下面一种绑定方法, 一次性绑定, 不会继续监听&lt;/p&gt;

&lt;h3 id=&#34;2-v-once&#34;&gt;2.v-once&lt;/h3&gt;

&lt;p&gt;该赋值指令, 只对文本进行一次赋值, 赋值完成后不会继续监听该值的变化. 对于特定的场景是非常好用的指令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;hello {{world}}&amp;lt;/p&amp;gt;
        &amp;lt;p v-text=&amp;quot;&#39;hello &#39; + world&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p v-once=&amp;quot;`hello ${world}`&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;button @click=&amp;quot;world=&#39;vue2.0&#39;&amp;quot;&amp;gt;改变wrold值&amp;lt;/button&amp;gt;
     &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;

export default {
     data () {
         return {
              world : &amp;quot;world&amp;quot;
         }
     }
}

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样通过上一个demo,稍作修改就可以体验下该指令;&lt;/p&gt;

&lt;p&gt;点击按钮的时候 通过&lt;code&gt;{{}}&lt;/code&gt; 和 &lt;code&gt;v-text&lt;/code&gt; 绑定的 world 会改变,而 &lt;code&gt;v-once&lt;/code&gt; 绑定则保持不变;&lt;/p&gt;

&lt;h3 id=&#34;3-绑定html原文&#34;&gt;3.绑定HTML原文&lt;/h3&gt;

&lt;p&gt;有些特定场景需要 绑定html原文, 而&lt;code&gt;{{}}&lt;/code&gt;和 &lt;code&gt;v-text&lt;/code&gt; 两种绑定方法会把原文当作文本解析.&lt;/p&gt;

&lt;p&gt;所以 vue 提供了另一个指令 &lt;code&gt;v-html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;同样用前面的demo稍作修改:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;p v-text=&amp;quot;html&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p v-html=&amp;quot;html&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
     &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;

export default {
     data () {
         return {
              html : `&amp;lt;span style=&amp;quot;color:blue&amp;quot;&amp;gt;我是蓝色的&amp;lt;/span&amp;gt;`
         }
     }
}

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以清楚的看到通过&lt;code&gt;v-text&lt;/code&gt;绑定的html, 直接把标签当作文本解析了,&lt;/p&gt;

&lt;p&gt;通过&lt;code&gt;v-html&lt;/code&gt;绑定的html, 则把html正常解析了, 文字也显示为蓝色.&lt;/p&gt;

&lt;h3 id=&#34;4-属性绑定&#34;&gt;4.属性绑定&lt;/h3&gt;

&lt;p&gt;vue中非常重要的一个用法,组件中传递!对于属性的绑定我们不能使用&lt;code&gt;{{attr}}&lt;/code&gt;语法,同样vue提供给了属性绑定指令&lt;/p&gt;

&lt;p&gt;&lt;code&gt;v-bind:attr=&amp;quot;attr&amp;quot;&lt;/code&gt; 对应语法糖 &lt;code&gt;:attr=&amp;quot;attr&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;简单的应用场景:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
    	&amp;lt;span v-bind:id=&amp;quot;id&amp;quot;&amp;gt;id&amp;lt;/span&amp;gt;
    	&amp;lt;a :href=&amp;quot;href&amp;quot;&amp;gt;vue&amp;lt;/a&amp;gt;
    	&amp;lt;img :src=&amp;quot;img&amp;quot; alt=&amp;quot;image&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;

export default {
     data () {
         return {
              id: &#39;vue&#39;,
              href: &#39;https://cn.vuejs.org&#39;,
              img: &#39;https://cn.vuejs.org/images/logo.png&#39;
         }
     }
}

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;属性中支持number string boolean类型，不用&lt;code&gt;:&lt;/code&gt;来绑定的属性可以直接属性赋值(换句话说,如果不是需要动态赋值的属&lt;/p&gt;

&lt;p&gt;性,可以直接按照html语法的属性写)，如果需要动态改变属性值(通过&lt;code&gt;data数据中返回的属性变量&lt;/code&gt;)一定要使用&lt;code&gt;:&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-使用javascript表达式&#34;&gt;5.使用JavaScript表达式&lt;/h3&gt;

&lt;p&gt;vue 绑定语法&lt;code&gt;{{}}&lt;/code&gt;支持JavaScript表达式(简单的运算,不支持流程控制的语法)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
     &amp;lt;div&amp;gt;
        &amp;lt;div id=&amp;quot;method1&amp;quot;&amp;gt;
            &amp;lt;p&amp;gt;{{ count &amp;lt; 0 ? &#39;+&#39; : &#39;-&#39;}} {{count + 1}}&amp;lt;/p&amp;gt;
            &amp;lt;button @click=&#39;count ++&#39;&amp;gt;增加&amp;lt;/button&amp;gt;
            &amp;lt;button @click=&#39;count --&#39;&amp;gt;减少&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div id=&amp;quot;method2&amp;quot;&amp;gt;
            &amp;lt;input type=&amp;quot;text&amp;quot; v-model=&#39;message&#39;&amp;gt;
            &amp;lt;h1&amp;gt;{{ message.split(&#39;&#39;).reverse().join(&#39;&#39;) }}&amp;lt;/h1&amp;gt;
        &amp;lt;/div&amp;gt;
     &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;

export default {
     data () {
         return {
              count : 0,
              message : &amp;quot;&amp;quot;
         }
     }
}

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用中,如果是特别复杂的算法,建议通过method或者filter来计算;&lt;/p&gt;

&lt;h3 id=&#34;6-修饰符&#34;&gt;6.修饰符&lt;/h3&gt;

&lt;p&gt;修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定.&lt;/p&gt;

&lt;p&gt;对于vue绑定的事件, 可以提前通过修饰符限制事件方法执行的过程&lt;/p&gt;

&lt;p&gt;例如: 通过 &lt;code&gt;click.prevent&lt;/code&gt; 来阻止默认行为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
     &amp;lt;div&amp;gt;
         &amp;lt;a href=&amp;quot;https://www.baidu.com&amp;quot; @click.prevent=&amp;quot;click&amp;quot;&amp;gt;baidu&amp;lt;/my-button&amp;gt;
     &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
     methods : {
         click () {
             alert(&amp;quot;阻止a标签的默认行为 .prevent&amp;quot;)
         }
     }
}

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再有: 通过 &lt;code&gt;v-model.trim&lt;/code&gt; 来去掉value的空格&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
     &amp;lt;div&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; v-model.trim=&amp;quot;content&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; v-model = &#39;content&#39;&amp;gt;
     &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
     data () {
         return {
             content : &amp;quot;&amp;quot;
         }
     }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-过滤器&#34;&gt;7.过滤器&lt;/h3&gt;

&lt;p&gt;Vue.js 允许你自定义过滤器，可被用作一些常见的文本格式化。过滤器可以用在两个地方：mustache 插值和 v-bind 表达&lt;/p&gt;

&lt;p&gt;式。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示：&lt;/p&gt;

&lt;p&gt;在v-bind中也就是2.10的时候才支持这个功能，这个大家要对这个版本有一定的了解，正确的使用&lt;/p&gt;

&lt;p&gt;应用场景 ：
把 账单金额格式化为&lt;code&gt;$100,000.00&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt;template&amp;gt;
     &amp;lt;div&amp;gt;
         &amp;lt;p&amp;gt;{{money | currency}}&amp;lt;/p&amp;gt;
     &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
     data () {
         return {
             telephone : 10000
         }
     },
     filter: {
     	currency (value) {
  		let money = value * 1
  		if( !!isNaN(money)) money = 0;
  		money.toLocaleString(&#39;en-IN&#39;, {
  			style: &#39;currency&#39;,
  			currency: &#39;CNY&#39;
		});
		return money
	   }
     }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8.语法糖&lt;/p&gt;

&lt;p&gt;vue中常用的语法糖&lt;/p&gt;

&lt;p&gt;&lt;code&gt;v-on:click&lt;/code&gt; = &lt;code&gt;@click&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;v-bind:src&lt;/code&gt; = &lt;code&gt;:src&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;模版语法基础知识,是开发中最常用的, 要灵活的使用!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>逝去的2016，你收获了什么？</title>
      <link>http://liuys.me/blog/2016-final/</link>
      <pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://liuys.me/blog/2016-final/</guid>
      <description>

&lt;p&gt;生命的旅途，一程有一程的风景。回看2016年，曾经的片段，总有一些bug，会停留在JIRA上;总有一些技术，静静的停留在计划中。这一年经历了哪些，学会了什么?&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;2016-01-离开工作四年的公司-只为了离家更近&#34;&gt;2016-01，离开工作四年的公司，只为了离家更近！&lt;/h3&gt;

&lt;p&gt;很想念新疆的蓝天，没有雾霾的日子，想念滑雪一圈几公里的快感！&lt;br&gt;
问候一句曾经的兄弟们，你们还好吗？&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;2016-02-2016-04-回到北京-进入现在的公司&#34;&gt;2016-02 —— 2016-04，回到北京，进入现在的公司！&lt;/h3&gt;

&lt;p&gt;回来做的第一个项目：微信点餐系统（名字就不说了）&lt;br&gt;
期间：印象最深刻的一个思想——去中心化的O2O！&lt;br&gt;
也是正式开始写移动端页面。&lt;br&gt;
以前一直写的管理后台，移动端项目接触的非常少，开始写移动端的时候遇到过很多坑，前一篇文章就是填坑过程中总结的一些东西。当然不仅仅是这些坑，还有一些是真的忘了（0.0好了伤疤忘了疼）。这一阶段收获还是蛮多的，特别是移动端的一些技巧！后面有时间再整理一些
这个项目的后端语言是Go，从最开始接触的.NET，JAVA，到后来自学的Node，PHP， Go是我最近最感兴趣的，建议有经历的朋友可以学学，语法非常简单，开发速度最快的编译型语言（不知道是不是之一）。都说处理高并发非常厉害，作为一个前端我是真看不出来，嘿嘿！&lt;br&gt;
最重要的收获：对于&lt;strong&gt;微信JSDK&lt;/strong&gt;，有了非常熟练的掌握&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;2016-05-2016-08-回到老本行-管理后台&#34;&gt;2016-05 —— 2016-08，回到老本行，管理后台！&lt;/h3&gt;

&lt;p&gt;与之前不同的地方，这次是 &lt;strong&gt;angular&lt;/strong&gt; + &lt;strong&gt;webpack&lt;/strong&gt; 构建的后台项目&lt;br&gt;
收获：&lt;br&gt;
1. 通过自己编写directive，对angular的指令有了更深刻的了解。这也是angular的乐趣之一&lt;br&gt;
2. 编写service，学到了一种angular思想，controller只处理逻辑问题，传输数据，用户信息，用户权限等操作，尽可能的放在service   里面完成&lt;br&gt;
3. webpack的乐趣，使用插件来提高开发效率，掌握前端自动化工具，为了更好的专注于前端本身&lt;br&gt;
4. 使用了MVC框架之后，发现特别的不喜欢频繁的操作DOM了，这也是我学些VUE的一个动力！&lt;br&gt;
5. 自学&lt;strong&gt;VUE&lt;/strong&gt;，自己写了一个微信打卡的小项目，使用价值不高，只是单纯的为了学习&lt;strong&gt;VUE&lt;/strong&gt;。后面共享到Github供大家参考!&lt;br&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;2016-09-发现hugo-搭建自己的博客&#34;&gt;2016-09，发现Hugo，搭建自己的博客！&lt;/h3&gt;

&lt;p&gt;很早就有搭建博客的想法，最开始看的是Hexo，总觉得不是自己的菜。直到发现hugo，是真的喜欢！如果你也在寻找，不妨试一试，有什么问题可以留言，一起探讨！&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;2016-10-2016-12-开始关注angular2-typescript&#34;&gt;2016-10 —— 2016-12，开始关注angular2，TypeScript&lt;/h3&gt;

&lt;p&gt;写angular1项目，组件化的思想开始进入我的视线！到自学VUE，再次看到组件化的思想，让我正视前端的发展方向！回想以前常用的CV大法，发现确实是非常稚嫩。因此我的目光开始关注这方面的技术，一切皆组件，angular2也是在这个时候进入我的学习计划中。写ng1项目时候，社区里面反应的弊端，大部分我都遇到过，因此对于ng2的期望是非常的高，它也没有让我失望！学习ng2，自然少不了ts了，这个JavaScript的超集，解决了js的大部分诟病，更彻底将js转变为面向对象的开发方式（类java），学过java的上手回非常快，希望可以有一起学习的朋友！&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;最后&#34;&gt;最后&lt;/h3&gt;

&lt;p&gt;2016算是一个满意的结束，成绩不多，也没有什么遗憾！&lt;br&gt;
2017年的第一个目标，继续学习&lt;strong&gt;Typescript&lt;/strong&gt;，写一个自己的ng2项目！&lt;br&gt;
&lt;span style=&#34;color:#fff&#34;&gt;2016最重要的收获是，认识了她！以后最大的目标就是：让你过的幸福！！！ 加油&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>移动端网页布局方法总结</title>
      <link>http://liuys.me/blog/mobile-resove/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://liuys.me/blog/mobile-resove/</guid>
      <description>

&lt;h3 id=&#34;1-移动端-a-input标签被点击时查实的半透明灰色背景&#34;&gt;1. 移动端，a、input标签被点击时查实的半透明灰色背景&lt;/h3&gt;

&lt;p&gt;描述：发生在wp操作系统中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;msapplication-tap-highlight&amp;quot; content=&amp;quot;no&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;2-关闭ios键盘首字母大写&#34;&gt;2.关闭IOS键盘首字母大写&lt;/h3&gt;

&lt;p&gt;描述：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; autocapitalize=&amp;quot;off&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;3-禁止文本缩放&#34;&gt;3.禁止文本缩放&lt;/h3&gt;

&lt;p&gt;描述：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;html {
    -webkit-text-size-adjust: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;4-清除输入框内阴影&#34;&gt;4.清除输入框内阴影&lt;/h3&gt;

&lt;p&gt;描述：IOS中，输入框默认有内部阴影，但是无法用box-shadow来清除&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;input,
textarea {
    border: 0;
    -webkit-appearance: none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;5-忽略页面的数字为电话-忽略email&#34;&gt;5.忽略页面的数字为电话，忽略email&lt;/h3&gt;

&lt;p&gt;描述：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;format-detection&amp;quot; content=&amp;quot;telephone=no, email=no&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;6-快速回弹滚动&#34;&gt;6.快速回弹滚动&lt;/h3&gt;

&lt;p&gt;描述：可以选择相应插件，iscroll，idangero swiper，文档一大堆；&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.xxx {
    overflow: auto;
    -webkit-overflow-scrolling: touch;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;7-禁止选中内容&#34;&gt;7.禁止选中内容&lt;/h3&gt;

&lt;p&gt;描述：如果你不想用户可以选中页面中的内容，那么你可以在css中禁掉;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.user-select-none {
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
}
// 兼容ie6-9
&amp;lt;any onselectstart=&amp;quot;return false;&amp;quot; unselectable=&amp;quot;on&amp;quot;&amp;gt;&amp;lt;/any&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;8-移动端取消touch高亮效果&#34;&gt;8.移动端取消touch高亮效果&lt;/h3&gt;

&lt;p&gt;描述：移动端页面，所有a标签在触发点击时或者所有设置了伪类 :active 的元素，默认都会在激活状态时，显示高亮框，如果不想要这个高亮，那么你可以通过css以下方法来禁止：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.xxx {
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;9-移动端禁止保存或拷贝图像&#34;&gt;9.移动端禁止保存或拷贝图像&lt;/h3&gt;

&lt;p&gt;描述：手机或者pad上长按图像 img ，会弹出选项 存储图像 或者 拷贝图像，如果你不想让用户这么操作，那么你可以通过以下方法来禁止：（IOS有效）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;img {
    -webkit-touch-callout: none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;10-解决字体在移动端比例缩小后出现锯齿的问题&#34;&gt;10.解决字体在移动端比例缩小后出现锯齿的问题&lt;/h3&gt;

&lt;p&gt;描述：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;html {
    -webkit-font-smoothing: antialiased;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;11-box-sizing-border-box-改变盒子模型的计算方式&#34;&gt;11.box-sizing：border-box；改变盒子模型的计算方式&lt;/h3&gt;

&lt;p&gt;描述：不仅仅是移动端应用，响应式页面都这么玩，根据需要给元素设置，*只代表元素；&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* {
    box-sizing：border-box；
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;12-按钮被按下效果&#34;&gt;12.按钮被按下效果&lt;/h3&gt;

&lt;p&gt;描述：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;button:active  {
    按下样式；
}
document.body.addEventListener(&#39;touchend&#39;, function () { });
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;13-按钮被按下效果&#34;&gt;13.按钮被按下效果&lt;/h3&gt;

&lt;p&gt;描述：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;button:active  {
    按下样式；
}
document.body.addEventListener(&#39;touchend&#39;, function () { });
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;14-设置input里面placeholder字体的大小&#34;&gt;14.设置input里面placeholder字体的大小&lt;/h3&gt;

&lt;p&gt;描述：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;::-webkit-input-placeholder{ font-size:10pt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;15-移动端-图片技巧&#34;&gt;15.移动端，图片技巧&lt;/h3&gt;

&lt;p&gt;描述：记得加上display：block；属性来解决img的边缘空白间隙的1px像素。 图片要适应不同的手机要设置width:100%;而且不能添加高度。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;img{
    display:block
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;16-audio元素和video元素在ios和android中无法自动播放&#34;&gt;16.audio元素和video元素在IOS和Android中无法自动播放&lt;/h3&gt;

&lt;p&gt;描述：可以做成触屏就播放，来解决&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;html&#39;).one(&#39;touchstart&#39;,function(){
    audio.play()
})
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;17-消除transition闪屏&#34;&gt;17.消除transition闪屏&lt;/h3&gt;

&lt;p&gt;描述：可以开启硬件加速，见18&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.css{
    -webkit-transform-style: preserve-3d;
    -webkit-backface-visibility: hidden;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;18-开启硬件加速-解决页面闪白-保证动画流畅&#34;&gt;18.开启硬件加速，解决页面闪白，保证动画流畅&lt;/h3&gt;

&lt;p&gt;描述：设计高性能CSS3动画的几个要素，尽可能地使用合成属性transform和opacity来设计CSS3动画，不使用position的left和top来定位，&lt;strong&gt;利用translate3D开启GPU加速&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.css {
    -webkit-transform: translate3d(0, 0, 0);
    -moz-transform: translate3d(0, 0, 0);
    -ms-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;19-针对适配等比缩放的方法&#34;&gt;19.针对适配等比缩放的方法&lt;/h3&gt;

&lt;p&gt;描述：神器~&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@media only screen and (min-width: 1024px){
    body{zoom:3.2;}
}
@media only screen and (min-width: 768px) and (max-width: 1023px) {
    body{zoom:2.4;}
}
@media only screen and (min-width: 640px) and (max-width: 767px) {
    body{zoom:2;}
}
@media only screen and (min-width: 540px) and (max-width: 639px) {
    body{zoom:1.68;}
}
@media only screen and (min-width: 480px) and (max-width: 539px) {
    body{zoom:1.5;}
}
@media only screen and (min-width: 414px) and (max-width: 479px) {
    body{zoom:1.29;}
}
@media only screen and (min-width: 400px) and (max-width: 413px) {
    body{zoom:1.25;}
}
@media only screen and (min-width: 375px) and (max-width: 413px) {
    body{zoom:1.17;}
}
@media only screen and (min-width: 360px) and (max-width:374px) {
    body{zoom:1.125;}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[^本文摘自互联网，以及工作中遇到的问题和处理过程]&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>